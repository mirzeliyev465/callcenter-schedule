# basic.css faylını yaradaq
cat > src/styles/basic.css << 'EOF'
/* Əsas utility classes */
.flex { display: flex; }
.flex-col { flex-direction: column; }
.flex-1 { flex: 1; }
.items-center { align-items: center; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.h-screen { height: 100vh; }
.min-h-screen { min-height: 100vh; }
.w-full { width: 100%; }
.w-80 { width: 320px; }
.w-12 { width: 48px; }
.w-10 { width: 40px; }
.w-16 { width: 64px; }
.h-12 { height: 48px; }
.h-10 { height: 40px; }
.h-16 { height: 64px; }

/* Spacing */
.p-2 { padding: 8px; }
.p-3 { padding: 12px; }
.p-4 { padding: 16px; }
.p-6 { padding: 24px; }
.p-8 { padding: 32px; }
.px-3 { padding-left: 12px; padding-right: 12px; }
.px-4 { padding-left: 16px; padding-right: 16px; }
.px-6 { padding-left: 24px; padding-right: 24px; }
.py-2 { padding-top: 8px; padding-bottom: 8px; }
.py-3 { padding-top: 12px; padding-bottom: 12px; }
.py-4 { padding-top: 16px; padding-bottom: 16px; }
.mb-2 { margin-bottom: 8px; }
.mb-4 { margin-bottom: 16px; }
.mb-6 { margin-bottom: 24px; }
.mb-8 { margin-bottom: 32px; }
.mt-4 { margin-top: 16px; }
.mt-auto { margin-top: auto; }
.mx-auto { margin-left: auto; margin-right: auto; }

/* Text */
.text-center { text-align: center; }
.text-left { text-align: left; }
.text-sm { font-size: 14px; }
.text-lg { font-size: 18px; }
.text-xl { font-size: 20px; }
.text-2xl { font-size: 24px; }
.text-4xl { font-size: 36px; }
.font-medium { font-weight: 500; }
.font-semibold { font-weight: 600; }
.font-bold { font-weight: 700; }

/* Colors */
.bg-white { background-color: white; }
.bg-gray-50 { background-color: #f9fafb; }
.bg-gray-100 { background-color: #f3f4f6; }
.bg-gray-200 { background-color: #e5e7eb; }
.bg-gray-700 { background-color: #374151; }
.bg-gray-800 { background-color: #1f2937; }
.bg-gray-900 { background-color: #111827; }
.bg-blue-600 { background-color: #2563eb; }
.bg-red-500 { background-color: #ef4444; }
.bg-green-500 { background-color: #10b981; }
.bg-purple-600 { background-color: #7c3aed; }
.bg-teal-600 { background-color: #0d9488; }
.bg-yellow-100 { background-color: #fef3c7; }

.text-white { color: white; }
.text-gray-300 { color: #d1d5db; }
.text-gray-400 { color: #9ca3af; }
.text-gray-600 { color: #4b5563; }
.text-gray-700 { color: #374151; }
.text-gray-800 { color: #1f2937; }
.text-gray-900 { color: #111827; }
.text-blue-600 { color: #2563eb; }
.text-red-600 { color: #dc2626; }
.text-red-700 { color: #b91c1c; }
.text-yellow-800 { color: #92400e; }

/* Borders */
.border { border-width: 1px; }
.border-b { border-bottom-width: 1px; }
.border-gray-200 { border-color: #e5e7eb; }
.border-gray-300 { border-color: #d1d5db; }
.border-gray-400 { border-color: #9ca3af; }
.border-gray-600 { border-color: #4b5563; }
.border-red-400 { border-color: #f87171; }
.rounded { border-radius: 4px; }
.rounded-lg { border-radius: 8px; }
.rounded-xl { border-radius: 12px; }
.rounded-full { border-radius: 9999px; }

/* Effects */
.shadow-sm { box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05); }
.shadow-lg { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }

/* Layout */
.fixed { position: fixed; }
.absolute { position: absolute; }
.relative { position: relative; }
.inset-0 { top: 0; right: 0; bottom: 0; left: 0; }
.inset-y-0 { top: 0; bottom: 0; }
.left-0 { left: 0; }
.z-30 { z-index: 30; }
.z-40 { z-index: 40; }
.z-50 { z-index: 50; }

/* Transform */
.transform { transform: translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }
.translate-x-0 { --tw-translate-x: 0px; }
.-translate-x-full { --tw-translate-x: -100%; }

/* Transition */
.transition-all { transition-property: all; }
.transition-colors { transition-property: color, background-color, border-color; }
.duration-200 { transition-duration: 200ms; }
.duration-300 { transition-duration: 300ms; }
.ease-in-out { transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

/* Overflow */
.overflow-auto { overflow: auto; }
.overflow-hidden { overflow: hidden; }
.overflow-x-auto { overflow-x: auto; }

/* Grid */
.grid { display: grid; }
.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
.grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
.gap-4 { gap: 16px; }
.gap-6 { gap: 24px; }

/* Responsive */
@media (min-width: 768px) {
  .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
}

@media (min-width: 1024px) {
  .lg\:static { position: static; }
  .lg\:translate-x-0 { --tw-translate-x: 0px; }
  .lg\:hidden { display: none; }
  .lg\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
}

/* Custom gradients */
.bg-gradient-to-r { background-image: linear-gradient(to right, var(--tw-gradient-stops)); }
.from-blue-500 { --tw-gradient-from: #3b82f6; --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgba(59, 130, 246, 0)); }
.to-purple-600 { --tw-gradient-to: #7c3aed; }
.from-green-500 { --tw-gradient-from: #10b981; --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgba(16, 185, 129, 0)); }
.to-teal-600 { --tw-gradient-to: #0d9488; }
.from-blue-50 { --tw-gradient-from: #eff6ff; --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgba(239, 246, 255, 0)); }
.to-indigo-100 { --tw-gradient-to: #e0e7ff; }
.from-gray-900 { --tw-gradient-from: #111827; --tw-gradient-stops: var(--tw-gradient-from), var(--tw-gradient-to, rgba(17, 24, 39, 0)); }
.to-gray-800 { --tw-gradient-to: #1f2937; }

/* Focus states */
.focus\:ring-2:focus { box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5); }
.focus\:ring-blue-500:focus { --tw-ring-color: #3b82f6; }

/* Hover states */
.hover\:bg-gray-200:hover { background-color: #e5e7eb; }
.hover\:bg-red-600:hover { background-color: #dc2626; }
.hover\:bg-blue-700:hover { background-color: #1d4ed8; }
.hover\:text-red-900:hover { color: #7f1d1d; }
.hover\:text-white:hover { color: white; }
.hover\:shadow-lg:hover { box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); }

/* Animation */
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.animate-spin {
  animation: spin 1s linear infinite;
}

/* Table styles */
table {
  border-collapse: collapse;
  width: 100%;
}

th, td {
  border: 1px solid #e5e7eb;
  padding: 8px 12px;
  text-align: left;
}

thead {
  background-color: #f9fafb;
}

/* Max width */
.max-w-4xl { max-width: 56rem; }

/* Space */
.space-y-2 > * + * { margin-top: 8px; }
.space-y-4 > * + * { margin-top: 16px; }
.space-x-3 > * + * { margin-left: 12px; }
.space-x-4 > * + * { margin-left: 16px; }

/* Custom components */
.sidebar-menu-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px 16px;
  border-radius: 8px;
  transition: all 0.2s ease;
  color: #d1d5db;
  font-weight: 500;
  width: 100%;
  text-align: left;
  border: none;
  background: none;
  cursor: pointer;
}

.sidebar-menu-item:hover {
  background-color: rgba(255, 255, 255, 0.1);
  color: white;
}

.card {
  background: white;
  border-radius: 12px;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  border: 1px solid #e5e7eb;
}

.input-field {
  width: 100%;
  padding: 12px 16px;
  border: 1px solid #d1d5db;
  border-radius: 8px;
  font-size: 14px;
  transition: all 0.2s ease;
  background: white;
}

.input-field:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.btn-primary {
  background: linear-gradient(135deg, #3b82f6, #1d4ed8);
  color: white;
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.2s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
}

.btn-primary:active {
  transform: translateY(0);
}
EOF

# İndi App.jsx faylını yeniləyək, yalnız tələb olunan CSS fayllarını import edək
cat > src/App.jsx << 'EOF'
import React, { useState, useEffect, useMemo } from 'react';
import './styles/globals.css';
import './styles/basic.css';

// Firebase konfiqurasiyası (mock)
const firebaseConfig = {
  apiKey: "demo-api-key",
  authDomain: "nobebe-sistemi.firebaseapp.com",
  projectId: "nobebe-sistemi",
  storageBucket: "nobebe-sistemi.appspot.com",
  messagingSenderId: "123456789",
  appId: "demo-app-id"
};

// Mock Firebase Auth Service
const authService = {
  async anonymousLogin() {
    // Mock anonim giriş
    const mockUser = {
      uid: 'user-' + Date.now(),
      email: null,
      displayName: null,
      isAnonymous: true
    };
    
    return {
      success: true,
      user: mockUser
    };
  },

  async logout() {
    return { success: true };
  },

  onAuthStateChange(callback) {
    // Mock auth state dəyişikliyi
    setTimeout(() => {
      const mockUser = {
        uid: 'user-' + Date.now(),
        email: null,
        displayName: null,
        isAnonymous: true
      };
      callback(mockUser);
    }, 1000);
    
    return () => {}; // unsubscribe funksiyası
  }
};

// Mock User Service
const userService = {
  subscribeToUsers(callback) {
    // Mock istifadəçi məlumatları
    const mockUsers = {
      'admin-1': {
        uid: 'admin-1',
        name: 'Admin',
        surname: 'User',
        email: 'admin@nobebe.az',
        role: 'admin'
      },
      'user-1': {
        uid: 'user-1',
        name: 'Əli',
        surname: 'Məmmədov',
        email: 'eli@nobebe.az',
        role: 'operator'
      },
      'user-2': {
        uid: 'user-2',
        name: 'Aygün',
        surname: 'Quliyeva',
        email: 'aygun@nobebe.az',
        role: 'operator'
      },
      'user-3': {
        uid: 'user-3',
        name: 'Rəşad',
        surname: 'Hüseynov',
        email: 'reshad@nobebe.az',
        role: 'operator'
      }
    };

    setTimeout(() => {
      callback(mockUsers);
    }, 1500);

    return () => {}; // unsubscribe funksiyası
  },

  async createUser(userData) {
    // Mock istifadəçi yaratma
    return {
      success: true,
      message: 'İstifadəçi uğurla yaradıldı'
    };
  }
};

// Mock Schedule Service
const scheduleService = {
  subscribeToSchedules(callback) {
    // Mock cədvəl məlumatları
    const currentMonth = new Date().toISOString().substring(0, 7);
    const mockSchedules = {
      [currentMonth]: {
        userAssignments: {
          'user-1': {
            shifts: {
              1: '9-5', 2: '9-5', 3: '9-6', 4: '10-7', 5: 'OFF',
              6: 'M', 7: 'M', 8: '9-5', 9: '9-5', 10: '9-6',
              11: '10-7', 12: 'OFF', 13: 'M', 14: '9-5', 15: '9-5',
              16: '9-6', 17: '10-7', 18: 'OFF', 19: 'M', 20: '9-5',
              21: '9-5', 22: '9-6', 23: '10-7', 24: 'OFF', 25: 'M',
              26: '9-5', 27: '9-5', 28: '9-6', 29: '10-7', 30: 'OFF'
            }
          },
          'user-2': {
            shifts: {
              1: '10-7', 2: 'OFF', 3: 'M', 4: '9-5', 5: '9-5',
              6: '9-6', 7: '10-7', 8: 'OFF', 9: 'M', 10: '9-5',
              11: '9-5', 12: '9-6', 13: '10-7', 14: 'OFF', 15: 'M',
              16: '9-5', 17: '9-5', 18: '9-6', 19: '10-7', 20: 'OFF',
              21: 'M', 22: '9-5', 23: '9-5', 24: '9-6', 25: '10-7',
              26: 'OFF', 27: 'M', 28: '9-5', 29: '9-5', 30: '9-6'
            }
          },
          'user-3': {
            shifts: {
              1: 'OFF', 2: 'M', 3: '9-5', 4: '9-5', 5: '9-6',
              6: '10-7', 7: 'OFF', 8: 'M', 9: '9-5', 10: '9-5',
              11: '9-6', 12: '10-7', 13: 'OFF', 14: 'M', 15: '9-5',
              16: '9-5', 17: '9-6', 18: '10-7', 19: 'OFF', 20: 'M',
              21: '9-5', 22: '9-5', 23: '9-6', 24: '10-7', 25: 'OFF',
              26: 'M', 27: '9-5', 28: '9-5', 29: '9-6', 30: '10-7'
            }
          }
        }
      }
    };

    setTimeout(() => {
      callback(mockSchedules);
    }, 2000);

    return () => {}; // unsubscribe funksiyası
  },

  async saveUserShifts(month, userId, shifts, adminId) {
    // Mock cədvəl yadda saxlanması
    return {
      success: true,
      message: 'Növbə cədvəli uğurla yadda saxlandı'
    };
  }
};

// Mock Request Service
const requestService = {
  subscribeToRequests(callback) {
    // Mock sorğu məlumatları
    const mockRequests = [
      {
        id: 'req-1',
        type: 'Məzuniyyət',
        userId: 'user-1',
        userName: 'Əli Məmmədov',
        startDate: '2024-01-15',
        endDate: '2024-01-20',
        leaveType: 'Əmək',
        reason: 'Ailəvi məzuniyyət',
        status: 'Gözləmədə',
        createdAt: '2024-01-10T10:00:00Z'
      },
      {
        id: 'req-2',
        type: 'Smen Dəyiş',
        userId: 'user-2',
        userName: 'Aygün Quliyeva',
        targetUserId: 'user-3',
        targetUserName: 'Rəşad Hüseynov',
        swapDate: '2024-01-18',
        reason: 'Şəxsi işlər üçün',
        status: 'Gözləmədə',
        createdAt: '2024-01-09T14:30:00Z'
      }
    ];

    setTimeout(() => {
      callback(mockRequests);
    }, 1000);

    return () => {}; // unsubscribe funksiyası
  },

  async createShiftSwapRequest(requestData) {
    // Mock smen dəyişmə sorğusu
    return {
      success: true,
      message: 'Smen dəyişmə sorğusu uğurla göndərildi'
    };
  },

  async createLeaveRequest(requestData) {
    // Mock məzuniyyət sorğusu
    return {
      success: true,
      message: 'Məzuniyyət sorğusu uğurla göndərildi'
    };
  }
};

// Mock Notification Service
const notificationService = {
  showSuccess(message) {
    alert('✅ ' + message);
  },
  
  showError(message) {
    alert('❌ ' + message);
  }
};

// Utility funksiyaları
const getDaysInMonth = (monthString) => {
  const [year, month] = monthString.split('-').map(Number);
  return new Date(year, month, 0).getDate();
};

const getShiftLabel = (shiftCode) => {
  const shiftMap = {
    '': '📅 Növbə seçin',
    '9-5': '🌅 9:00 - 17:00',
    '9-6': '🌞 9:00 - 18:00',
    '10-7': '☀️ 10:00 - 19:00',
    '10-6': '🌤️ 10:00 - 18:00',
    '11-7': '🌇 11:00 - 19:00',
    '12-8': '🌆 12:00 - 20:00',
    '1-9': '🌃 13:00 - 21:00',
    'M': '🏖️ Məzuniyyət',
    'OFF': '💤 İstirahət'
  };
  return shiftMap[shiftCode] || 'Təyin edilməyib';
};

// Validation funksiyaları
const validateUserData = (userData) => {
  const errors = [];
  if (!userData.name) errors.push('Ad tələb olunur');
  if (!userData.surname) errors.push('Soyad tələb olunur');
  if (!userData.email) errors.push('Email tələb olunur');
  if (!userData.uid) errors.push('İstifadəçi ID tələb olunur');
  
  return {
    isValid: errors.length === 0,
    errors
  };
};

const validateLeaveRequest = (requestData) => {
  const errors = [];
  if (!requestData.startDate) errors.push('Başlama tarixi tələb olunur');
  if (!requestData.endDate) errors.push('Bitmə tarixi tələb olunur');
  if (!requestData.reason) errors.push('Səbəb tələb olunur');
  
  return {
    isValid: errors.length === 0,
    errors
  };
};

const validateShiftSwap = (requestData) => {
  const errors = [];
  if (!requestData.targetUserId) errors.push('Hədəf operator seçilməlidir');
  if (!requestData.swapDate) errors.push('Dəyişmə tarixi tələb olunur');
  if (!requestData.reason) errors.push('Səbəb tələb olunur');
  
  return {
    isValid: errors.length === 0,
    errors
  };
};

const AVAILABLE_SHIFTS = [
  { value: "", label: "📅 Növbə seçin", color: "gray" },
  { value: "9-5", label: "🌅 9:00 - 17:00", color: "blue" },
  { value: "9-6", label: "🌞 9:00 - 18:00", color: "green" },
  { value: "10-7", label: "☀️ 10:00 - 19:00", color: "teal" },
  { value: "10-6", label: "🌤️ 10:00 - 18:00", color: "cyan" },
  { value: "11-7", label: "🌇 11:00 - 19:00", color: "orange" },
  { value: "12-8", label: "🌆 12:00 - 20:00", color: "amber" },
  { value: "1-9", label: "🌃 13:00 - 21:00", color: "purple" },
  { value: "M", label: "🏖️ Məzuniyyət", color: "red" },
  { value: "OFF", label: "💤 İstirahət", color: "gray" }
];

const App = () => {
  const [userId, setUserId] = useState(null);
  const [userRole, setUserRole] = useState('operator');
  const [schedules, setSchedules] = useState({});
  const [users, setUsers] = useState({});
  const [requests, setRequests] = useState([]);
  const [currentView, setCurrentView] = useState('home');
  const [activeMonth, setActiveMonth] = useState(new Date().toISOString().substring(0, 7));
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [sidebarOpen, setSidebarOpen] = useState(false);

  const isAdmin = userRole === 'admin';
  const currentSchedule = schedules[activeMonth] || { userAssignments: {} };
  const dayArray = useMemo(() => 
    Array.from({ length: getDaysInMonth(activeMonth) }, (_, i) => i + 1), 
    [activeMonth]
  );

  // Authentication
  useEffect(() => {
    const unsubscribe = authService.onAuthStateChange(async (user) => {
      if (user) {
        setUserId(user.uid);
        setLoading(false);
      } else {
        const result = await authService.anonymousLogin();
        if (result.success) {
          setUserId(result.user.uid);
        } else {
          setError(result.error);
          setLoading(false);
        }
      }
    });
    return () => unsubscribe();
  }, []);

  // Data subscriptions
  useEffect(() => {
    if (!userId) return;

    const unsubscribeUsers = userService.subscribeToUsers((newUsers) => {
      setUsers(newUsers);
      const currentUserRole = newUsers[userId]?.role || 'operator';
      setUserRole(currentUserRole);
    });

    const unsubscribeSchedules = scheduleService.subscribeToSchedules(setSchedules);
    const unsubscribeRequests = requestService.subscribeToRequests(setRequests);

    return () => {
      unsubscribeUsers();
      unsubscribeSchedules();
      unsubscribeRequests();
    };
  }, [userId]);

  // Operator funksiyaları
  const handleShiftSwapRequest = async (targetUserId, swapDate, reason) => {
    const validation = validateShiftSwap({ targetUserId, swapDate, reason });
    if (!validation.isValid) {
      setError(validation.errors[0]);
      return false;
    }

    try {
      const userName = `${users[userId]?.name} ${users[userId]?.surname || ''}`;
      const targetUserName = `${users[targetUserId]?.name} ${users[targetUserId]?.surname || ''}`;
      
      const result = await requestService.createShiftSwapRequest({
        userId, userName, targetUserId, targetUserName, swapDate, reason
      });
      
      if (result.success) {
        notificationService.showSuccess(result.message);
        return true;
      }
    } catch (error) {
      setError(error.message);
      return false;
    }
  };

  const handleLeaveRequest = async (startDate, endDate, leaveType, reason) => {
    const validation = validateLeaveRequest({ startDate, endDate, leaveType, reason });
    if (!validation.isValid) {
      setError(validation.errors[0]);
      return false;
    }

    try {
      const userName = `${users[userId]?.name} ${users[userId]?.surname || ''}`;
      const result = await requestService.createLeaveRequest({
        userId, userName, startDate, endDate, leaveType, reason
      });
      
      if (result.success) {
        notificationService.showSuccess(result.message);
        return true;
      }
    } catch (error) {
      setError(error.message);
      return false;
    }
  };

  // Admin funksiyaları
  const handleSaveShiftChanges = async (targetUserId, shifts) => {
    try {
      const result = await scheduleService.saveUserShifts(activeMonth, targetUserId, shifts, userId);
      if (result.success) {
        notificationService.showSuccess(result.message);
        return true;
      }
    } catch (error) {
      setError(error.message);
      return false;
    }
  };

  const handleCreateUser = async (userData) => {
    const validation = validateUserData(userData);
    if (!validation.isValid) {
      setError(validation.errors[0]);
      return false;
    }

    try {
      const result = await userService.createUser(userData);
      if (result.success) {
        notificationService.showSuccess(result.message);
        return true;
      }
    } catch (error) {
      setError(error.message);
      return false;
    }
  };

  // Loading Spinner
  const LoadingSpinner = () => (
    <div className="flex items-center justify-center min-h-screen" style={{ background: 'linear-gradient(135deg, #eff6ff 0%, #e0e7ff 100%)' }}>
      <div className="text-center">
        <div className="w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
        <p className="text-gray-600 font-medium">Sistem yüklənir...</p>
      </div>
    </div>
  );

  // Sidebar
  const ProfessionalSidebar = () => {
    const currentUserName = `${users[userId]?.name} ${users[userId]?.surname || ''}`;
    
    return (
      <>
        {sidebarOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-40" style={{ display: 'block' }} onClick={() => setSidebarOpen(false)}></div>
        )}

        <div className={`fixed lg:static inset-y-0 left-0 z-50 w-80 text-white transform transition-transform duration-300 ease-in-out ${sidebarOpen ? 'translate-x-0' : '-translate-x-full lg:translate-x-0'}`} style={{ background: 'linear-gradient(to bottom, #111827 0%, #1f2937 100%)' }}>
          <div className="flex flex-col h-full p-6">
            <div className="flex items-center space-x-3 mb-8">
              <div className="w-12 h-12 rounded-xl flex items-center justify-center" style={{ background: 'linear-gradient(135deg, #3b82f6 0%, #7c3aed 100%)' }}>
                <span className="text-white font-bold text-lg">NS</span>
              </div>
              <div>
                <h1 className="text-xl font-bold">Növbə Sistemi</h1>
                <p className="text-gray-400 text-sm">Professional İdarəetmə</p>
              </div>
            </div>

            <div className="flex items-center space-x-3 mb-6 p-3 rounded-lg" style={{ backgroundColor: '#374151' }}>
              <div className="w-10 h-10 rounded-full flex items-center justify-center" style={{ background: 'linear-gradient(135deg, #10b981 0%, #0d9488 100%)' }}>
                <span className="text-white font-semibold text-sm">
                  {currentUserName.split(' ').map(n => n[0]).join('')}
                </span>
              </div>
              <div>
                <p className="text-sm font-semibold">{currentUserName}</p>
                <p className="text-xs text-gray-400">{isAdmin ? '👑 Admin' : '👨‍💼 Operator'}</p>
              </div>
            </div>

            <nav className="space-y-2 flex-1">
              <button onClick={() => { setCurrentView('home'); setSidebarOpen(false); }} className="sidebar-menu-item w-full text-left">
                <span>🏠</span>
                <span>Əsas Səhifə</span>
              </button>
              {isAdmin ? (
                <button onClick={() => { setCurrentView('admin'); setSidebarOpen(false); }} className="sidebar-menu-item w-full text-left">
                  <span>👑</span>
                  <span>İdarəetmə</span>
                </button>
              ) : (
                <button onClick={() => { setCurrentView('operator'); setSidebarOpen(false); }} className="sidebar-menu-item w-full text-left">
                  <span>💼</span>
                  <span>Operator Paneli</span>
                </button>
              )}
            </nav>

            <div className="mt-auto">
              <label className="block text-sm font-medium text-gray-300 mb-2">📅 Cədvəl Ayı</label>
              <input type="month" value={activeMonth} onChange={(e) => setActiveMonth(e.target.value)} className="w-full px-3 py-2 rounded-lg text-white focus:ring-2 focus:ring-blue-500" style={{ backgroundColor: '#374151', border: '1px solid #4b5563' }} />
            </div>
          </div>
        </div>
      </>
    );
  };

  // Admin Dashboard
  const AdminDashboard = () => {
    const [activeTab, setActiveTab] = useState('Təyinatlar');
    const [newUser, setNewUser] = useState({ uid: '', name: '', surname: '', email: '', password: '', role: 'operator' });
    const [targetUserId, setTargetUserId] = useState('');
    const [selectedShifts, setSelectedShifts] = useState({});

    const operatorUsers = Object.values(users).filter(u => u.role === 'operator' || u.role === 'admin');

    return (
      <div className="p-8">
        <h1 className="text-4xl font-bold text-gray-900 mb-8">👑 Admin İdarəetmə Paneli</h1>
        
        <div className="flex space-x-4 mb-8">
          {['Təyinatlar', 'Sorğular', 'İstifadəçilər'].map(tab => (
            <button 
              key={tab} 
              onClick={() => setActiveTab(tab)} 
              className={`px-6 py-3 rounded-xl font-semibold transition-all ${activeTab === tab ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}
            >
              {tab}
            </button>
          ))}
        </div>

        {activeTab === 'İstifadəçilər' && (
          <div className="card p-6">
            <h2 className="text-2xl font-bold mb-4">Yeni İstifadəçi Yarat</h2>
            <div className="grid grid-cols-2 gap-4 mb-4">
              <input type="text" placeholder="Ad" value={newUser.name} onChange={e => setNewUser({...newUser, name: e.target.value})} className="input-field" />
              <input type="text" placeholder="Soyad" value={newUser.surname} onChange={e => setNewUser({...newUser, surname: e.target.value})} className="input-field" />
              <input type="email" placeholder="Email" value={newUser.email} onChange={e => setNewUser({...newUser, email: e.target.value})} className="input-field" />
              <input type="text" placeholder="İstifadəçi ID" value={newUser.uid} onChange={e => setNewUser({...newUser, uid: e.target.value})} className="input-field" />
              <input type="password" placeholder="Şifrə" value={newUser.password} onChange={e => setNewUser({...newUser, password: e.target.value})} className="input-field" />
              <select value={newUser.role} onChange={e => setNewUser({...newUser, role: e.target.value})} className="input-field">
                <option value="operator">Operator</option>
                <option value="admin">Admin</option>
              </select>
            </div>
            <button onClick={() => handleCreateUser(newUser)} className="btn-primary w-full">
              🎯 İstifadəçini Yarat
            </button>
          </div>
        )}

        {activeTab === 'Təyinatlar' && (
          <div className="card p-6">
            <h2 className="text-2xl font-bold mb-4">Növbə Cədvəli Təyin Et</h2>
            <select value={targetUserId} onChange={e => setTargetUserId(e.target.value)} className="input-field mb-4">
              <option value="">Operator seçin...</option>
              {operatorUsers.map(user => (
                <option key={user.uid} value={user.uid}>{user.name} {user.surname}</option>
              ))}
            </select>

            {targetUserId && (
              <div className="overflow-x-auto">
                <table className="min-w-full border">
                  <thead>
                    <tr className="bg-gray-50">
                      <th className="p-2 border">Gün</th>
                      {dayArray.map(day => <th key={day} className="p-2 border text-xs">G{day}</th>)}
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td className="p-2 border font-semibold">{users[targetUserId]?.name}</td>
                      {dayArray.map(day => (
                        <td key={day} className="p-1 border">
                          <select 
                            className="w-full p-1 text-xs border rounded" 
                            onChange={e => setSelectedShifts({...selectedShifts, [day]: e.target.value})}
                          >
                            {AVAILABLE_SHIFTS.map(shift => (
                              <option key={shift.value} value={shift.value}>{shift.label}</option>
                            ))}
                          </select>
                        </td>
                      ))}
                    </tr>
                  </tbody>
                </table>
                <button onClick={() => handleSaveShiftChanges(targetUserId, selectedShifts)} className="btn-primary mt-4">
                  💾 Cədvəli Yadda Saxla
                </button>
              </div>
            )}
          </div>
        )}

        {activeTab === 'Sorğular' && (
          <div className="card p-6">
            <h2 className="text-2xl font-bold mb-4">Gözləmədə olan Sorğular</h2>
            <div className="space-y-4">
              {requests.filter(req => req.status === 'Gözləmədə').map(request => (
                <div key={request.id} className="p-4 border rounded-lg">
                  <div className="flex justify-between items-start">
                    <div>
                      <p className="font-semibold">{request.type} - {request.userName}</p>
                      <p className="text-sm text-gray-600">
                        {request.type === 'Məzuniyyət' 
                          ? `${request.startDate} - ${request.endDate}`
                          : `${request.swapDate} - ${request.targetUserName}`
                        }
                      </p>
                    </div>
                    <span className="bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-sm">⏳ Gözləmədə</span>
                  </div>
                  <p className="text-sm text-gray-700 mt-2">{request.reason}</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    );
  };

  // Operator Dashboard
  const OperatorDashboard = () => {
    const [activeTab, setActiveTab] = useState('cedvel');
    const [swapData, setSwapData] = useState({ targetUserId: '', swapDate: '', reason: '' });
    const [leaveData, setLeaveData] = useState({ startDate: '', endDate: '', leaveType: 'Əmək', reason: '' });

    const userAssignment = currentSchedule.userAssignments[userId] || { shifts: {} };
    const operatorUsers = Object.values(users).filter(u => u.role === 'operator' && u.uid !== userId);

    return (
      <div className="p-8">
        <h1 className="text-4xl font-bold text-gray-900 mb-8">💼 Operator Paneli</h1>
        
        <div className="flex space-x-4 mb-8">
          {['cedvel', 'smen-deyis', 'mezuniyyet'].map(tab => (
            <button 
              key={tab} 
              onClick={() => setActiveTab(tab)} 
              className={`px-6 py-3 rounded-xl font-semibold transition-all ${activeTab === tab ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`}
            >
              {tab === 'cedvel' ? '📅 Cədvəlim' : tab === 'smen-deyis' ? '🔄 Smen Dəyiş' : '🏖️ Məzuniyyət'}
            </button>
          ))}
        </div>

        {activeTab === 'cedvel' && (
          <div className="card p-6">
            <h2 className="text-2xl font-bold mb-4">Mənim Növbə Cədvəlim</h2>
            <div className="overflow-x-auto">
              <table className="min-w-full border">
                <thead>
                  <tr className="bg-gray-50">
                    <th className="p-3 border">Gün</th>
                    <th className="p-3 border">Növbə</th>
                  </tr>
                </thead>
                <tbody>
                  {dayArray.map(day => (
                    <tr key={day}>
                      <td className="p-3 border font-semibold">{day}</td>
                      <td className="p-3 border">{getShiftLabel(userAssignment.shifts[day]) || 'Təyin edilməyib'}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {activeTab === 'smen-deyis' && (
          <div className="card p-6">
            <h2 className="text-2xl font-bold mb-4">Smen Dəyişmə Sorğusu</h2>
            <div className="space-y-4">
              <select value={swapData.targetUserId} onChange={e => setSwapData({...swapData, targetUserId: e.target.value})} className="input-field">
                <option value="">Operator seçin...</option>
                {operatorUsers.map(user => (
                  <option key={user.uid} value={user.uid}>{user.name} {user.surname}</option>
                ))}
              </select>
              <input type="date" value={swapData.swapDate} onChange={e => setSwapData({...swapData, swapDate: e.target.value})} className="input-field" />
              <textarea value={swapData.reason} onChange={e => setSwapData({...swapData, reason: e.target.value})} placeholder="Səbəb" rows="3" className="input-field" />
              <button onClick={() => handleShiftSwapRequest(swapData.targetUserId, swapData.swapDate, swapData.reason)} className="btn-primary w-full">
                📤 Sorğunu Göndər
              </button>
            </div>
          </div>
        )}

        {activeTab === 'mezuniyyet' && (
          <div className="card p-6">
            <h2 className="text-2xl font-bold mb-4">Məzuniyyət Sorğusu</h2>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <input type="date" value={leaveData.startDate} onChange={e => setLeaveData({...leaveData, startDate: e.target.value})} className="input-field" />
                <input type="date" value={leaveData.endDate} onChange={e => setLeaveData({...leaveData, endDate: e.target.value})} className="input-field" />
              </div>
              <select value={leaveData.leaveType} onChange={e => setLeaveData({...leaveData, leaveType: e.target.value})} className="input-field">
                <option value="Əmək">Əmək Məzuniyyəti</option>
                <option value="Ödənişli">Ödənişli Məzuniyyət</option>
              </select>
              <textarea value={leaveData.reason} onChange={e => setLeaveData({...leaveData, reason: e.target.value})} placeholder="Məzuniyyət səbəbi" rows="3" className="input-field" />
              <button onClick={() => handleLeaveRequest(leaveData.startDate, leaveData.endDate, leaveData.leaveType, leaveData.reason)} className="btn-primary w-full">
                🏖️ Məzuniyyət Sorğusu Göndər
              </button>
            </div>
          </div>
        )}
      </div>
    );
  };

  // Main Content
  const MainContent = () => {
    if (loading) return <LoadingSpinner />;
    if (error) return <div className="p-8 text-center text-red-600">{error}</div>;
    if (!userId) return <LoadingSpinner />;

    switch (currentView) {
      case 'admin':
        return isAdmin ? <AdminDashboard /> : <div className="p-8 text-center text-red-600">İcazəniz yoxdur.</div>;
      case 'operator':
        return !isAdmin ? <OperatorDashboard /> : <div className="p-8 text-center text-red-600">Bu səhifə yalnız operatorlar üçündür.</div>;
      default:
        return (
          <div className="p-8 text-center">
            <h1 className="text-4xl font-bold text-gray-900 mb-4">Xoş Gəlmisiniz!</h1>
            <p className="text-xl text-gray-600 mb-8">Növbə idarəetmə sisteminə xoş gəlmisiniz!</p>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 max-w-4xl mx-auto">
              <div className="card p-6 text-center">
                <div className="text-4xl mb-4">📅</div>
                <h3 className="text-xl font-semibold mb-2">Növbə Cədvəli</h3>
                <p className="text-gray-600">Cari ay üçün növbə cədvəlinizi görüntüləyin</p>
              </div>
              
              <div className="card p-6 text-center">
                <div className="text-4xl mb-4">🔄</div>
                <h3 className="text-xl font-semibold mb-2">Smen Dəyiş</h3>
                <p className="text-gray-600">Digər operatorlarla smen dəyişmə sorğusu göndərin</p>
              </div>
              
              <div className="card p-6 text-center">
                <div className="text-4xl mb-4">🏖️</div>
                <h3 className="text-xl font-semibold mb-2">Məzuniyyət</h3>
                <p className="text-gray-600">Məzuniyyət sorğusu yaradın və idarə edin</p>
              </div>
            </div>
          </div>
        );
    }
  };

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Sidebar */}
      <ProfessionalSidebar />
      
      {/* Main Content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Top Header */}
        <header className="bg-white shadow-sm border-b z-30">
          <div className="flex items-center justify-between p-4">
            <button 
              onClick={() => setSidebarOpen(!sidebarOpen)}
              className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
            >
              <span className="text-xl">☰</span>
            </button>
            
            <div className="flex items-center space-x-4">
              <h2 className="text-lg font-semibold text-gray-800">
                {currentView === 'home' && 'Əsas Səhifə'}
                {currentView === 'admin' && 'Admin Paneli'}
                {currentView === 'operator' && 'Operator Paneli'}
              </h2>
            </div>

            <button 
              onClick={() => authService.logout()}
              className="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors font-medium"
            >
              Çıxış
            </button>
          </div>
        </header>

        {/* Error Alert */}
        {error && (
          <div className="mx-4 mt-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
            <div className="flex justify-between items-center">
              <span>{error}</span>
              <button onClick={() => setError(null)} className="text-red-700 hover:text-red-900">
                ✕
              </button>
            </div>
          </div>
        )}

        {/* Content Area */}
        <main className="flex-1 overflow-auto" style={{ background: 'linear-gradient(135deg, #eff6ff 0%, #e0e7ff 100%)' }}>
          <MainContent />
        </main>
      </div>
    </div>
  );
};

export default App;
EOF